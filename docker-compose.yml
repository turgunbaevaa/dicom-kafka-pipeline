services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     # External (for host)
      - "29092:29092"   # Internal (for Docker network)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z 127.0.0.1 9092 > /tmp/healthcheck.log 2>&1 && echo 'Kafka healthy' || (cat /tmp/healthcheck.log && exit 1)"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s

  mongo: # Service name is 'mongo'
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo # Correctly points to 'mongo'
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      mongo: # Correctly depends on 'mongo'
        condition: service_healthy

  producer:
    build:
      context: ./producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_BROKER: kafka:29092
      KAFKA_TOPIC: file-data
      DICOM_FOLDER: /app/dicom_scans 
    volumes:
      - ./dicom_scans:/app/dicom_scans 

  consumer:
    build:
      context: ./consumer
    command: python -u consumer.py
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MONGO_URI: mongodb://mongo:27017/
    volumes:
      - ./dicom_scans:/app/dicom_scans # This one is clearly working based on logs
      - ./images:/app/images         # <--- THIS IS THE CRUCIAL ONE FOR IMAGES
    
volumes:
  mongo-data:
  kafka-data: